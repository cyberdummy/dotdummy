#!/bin/bash
set -euo pipefail

# Script to act as a project utility command runner like make but shell scripts
# just place a file called "dakefile" with commands in it to run

file=~/.config/dotdummy/docker.sh

if [[ -r "$file" ]] && [[ -f "$file" ]]; then
    source "$file"
fi

if [[ ! -z ${1+x} ]] && ([[ $1 == "stow" ]] || [[ $1 == "unstow" ]]); then
    if [[ -z ${2+x} ]]; then
        echo "Must supply package name" >&2
        exit 1
    fi

    pkg="${HOME}/.config/dotdummy/projects/${2}"

    if [[ ! -d "$pkg" ]]; then
        echo "Invalid package directory: ${pkg}" >&2
        exit 1
    fi

    flags=""

    if [[ $1 == "unstow" ]]; then
        flags="-D"
    fi

    stow $flags --no-folding -d $pkg -t $(pwd) .
    exit 0
fi

file="$(pwd)/dakefile"

if [[ ! -r "$file" ]]; then
    echo "No dakefile found" >&2
    exit
fi

if [[ -z ${1+x} ]] || [[ $1 == "help" ]]; then
    echo "The following actions are available:"
    for func in $(grep dake_ dakefile  | cut -c 5- | tr -cd '[:alpha:]\n'); do
        echo "  $func"
        echo "      $(grep -A 1 dake_${func} $file | tail -n 1)"
    done

    echo "  stow {package}"
    echo "          # Install project local config"

    echo "  unstow {package}"
    echo "          # Remove project local config"

    exit 0
fi

source "$file"

cmd="dake_$1"
shift

eval $cmd $@
