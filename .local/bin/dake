#!/bin/bash
set -euo pipefail

# Script to act as a project utility command runner like make but shell scripts
# just place a file called "dakefile" with commands in it to run

# To put/remove configuration files for a project
# $ dake stow folder/in/projects
if [[ ! -z ${1+x} ]] && ([[ $1 == "stow" ]] || [[ $1 == "unstow" ]]); then
    if [[ -z ${2+x} ]]; then
        echo "Must supply package name" >&2
        exit 1
    fi

    pkg="${HOME}/.config/dotdummy/projects/${2}"

    if [[ ! -d "$pkg" ]]; then
        echo "Invalid package directory: ${pkg}" >&2
        exit 1
    fi

    pkg=$(realpath $pkg)
    flags=""

    if [[ $1 == "unstow" ]]; then
        flags="-D"
    fi

    ignore_file="${pkg}/.stow-local-ignore"
    git_dir="${pkg}/dot-git"

    if [[ ! -f $ignore_file ]]; then
        touch $ignore_file
    fi

    stow $flags --ignore '^docker$' --ignore '^tom-notes$' --ignore '^dot-git$' --no-folding -d $pkg -t $(pwd) .

    stow $flags --ignore '^dot-git$' -d $pkg -t $(pwd) .

    if [[ -d $git_dir ]]; then
        stow $flags --no-folding -d $git_dir -t $(pwd)/.git .
    fi

    if [[ ! -s $ignore_file ]]; then
        rm $ignore_file
    fi

    exit 0
fi

# Setup a project
if [[ ! -z ${1+x} ]] && [[ $1 == "setup" ]]; then
    repo=$(dummy-code repo)

    if [[ "$repo" == "" ]]; then
        echo "No repo selected"
        exit 1
    fi

    dir=$(echo "$repo" | awk -F '/' '{print $2}')
    git clone "git@github.com:${repo}"
    cd $dir

    # Select a config
    configs=""
    while IFS="/" read -ra arr; do
        conf=""
        after=0
        for i in "${arr[@]}"; do
            if [[ $i == 'dakefile' ]]; then
                break
            fi

            if [[ $after == "1" ]]; then
                conf="${conf}${i}/"
            fi

            if [[ $i == "projects" ]]; then
                after=1
            fi
        done
        configs+=${conf::-1}
        configs+=$'\n'
    done < <(find ~/.config/dotdummy/projects -follow -name 'dakefile')

    selected=$(echo "$configs" | fzf)

    if [[ "$selected" == "" ]]; then
        echo "No config chosen"
        exit 0
    fi

    dake stow $selected
    exit 0
fi

file="$(pwd)/dakefile"

if [[ ! -r "$file" ]]; then
    if [[ $1 == "is_live" ]]; then
      exit
    fi
    echo "No dakefile found, use: (dake [un]stow [package]) to setup" >&2
    exit
fi

document_file() {
    eval f=$1
    for func in $(grep dake_ "$f" | cut -c 6- | tr -cd '[:alpha:]_\n'); do
        echo "  $func"
        echo "      $(grep -A 1 dake_${func} $f | tail -n 1)"
    done
}

if [[ -z ${1+x} ]] || [[ $1 == "help" ]]; then
    echo "The following actions are available:"

    document_file dakefile

    echo "  stow {package}"
    echo "          # Install project local config"

    echo "  unstow {package}"
    echo "          # Remove project local config"

    for src in $(grep 'source ' dakefile | cut -d ' ' -f 2); do
        echo "From $src"
        document_file $src
    done


    exit 0
fi

source "$file"

cmd="dake_$1"
shift

cmd="$cmd \"\$@\""

if [[ $cmd == "dake_is_live \"\$@\"" ]]; then
  eval $cmd 2> /dev/null
elif [[ $cmd == "dake_lint \"\$@\"" ]]; then
  eval $cmd || dummy-code lint-php $@
else
  eval $cmd
fi
