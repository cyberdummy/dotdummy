#!/bin/bash
set -uo pipefail

cdg () {
  cd $(git root)
}

lint-php() {
    php -l $1
    php ~/.config/composer/vendor/bin/phpmd $1 text cleancode,unusedcode,${HOME}/.config/phpmd/tom_rules.xml
    phpcs --report=emacs --standard=~/.config/phpcs/tom_standard.xml $1
}

lint-go() {
    gofmt -s -w $1
    golint $1
}

lint-shell() {
    shellcheck -f gcc $1
    local prob=$(shfmt -i 2 -sr -ci -s -l "$1")

    if [[ -n "$prob" ]]; then
      echo "$1:1:1: error shfmt does not like it"
    fi
}

shell-fmt() {
  shfmt -i 2 -sr -ci -s -l -w "$1"
}

lint-python() {
    pipenv run python -m py_compile $1

    pycodestyle $1

    pylint --reports=n --output-format=parseable $1
}

show-repos() {
    local repos=""

    for ((i=1; ; i+=1)); do
        contents=$(curl \
            -H "Authorization: token $(pass show github/cli-token)" \
            -s "https://api.github.com/user/repos?per_page=100&page=$i" \
            | jq -r '.[].full_name')
        repos+="$contents"

        lines=$(echo "$contents" | wc -l)

        if [[ $lines -lt 100 ]]; then
            break
        fi
    done

    echo "$repos"
}

choose-repo() {
    show-repos | fzf
}

create-pr() {
    local title base head send repo

    read -p 'Head: ' -i $(git rev-parse --abbrev-ref HEAD) -e head
    local jira=$(echo "$head" | awk -F '_' '{print $1}')

    read -p 'Title: ' -i "$jira" -e title
    read -p 'Base: ' -i 'release' -e base
    read -p 'Repo: ' -i $(git config --get remote.origin.url | awk -F ':' '{print $2}' | sed -e "s/.git$//") -e repo

    if [[ "$head" = "$base" ]]; then
        echo "Head is Base??"
        return 0
    fi


    # Description
    local tmp=$(mktemp -t "tmp.XXXXXXXXXX.md")
    local template="./.git/pr.template"

    if [[ -f $template ]]; then
        sed $template \
            -e "s/%%jira%%/$jira/" \
            > $tmp
    fi

    local first_sum=$(md5sum $tmp)
    $EDITOR $tmp
    local second_sum=$(md5sum $tmp)

    if [[ "$first_sum" = "$second_sum" ]]; then
        echo "Description unchanged or blank"
        return 0
    fi

    local description=$(cat $tmp)

    echo "Creating PR.."
    echo "Title: $title"
    echo "Head: $head"
    echo "Base: $base"
    echo "Repo: $repo"
    echo -e "Description:\n"
    echo -e "$description"
    echo $tmp

    read -p 'Send? (y/n): ' -e send

    if [[ "$send" != "y" ]]; then
        echo "Aborting"
        return 0
    fi

    local json=$(jq -n \
        --arg title "$title" \
        --arg head "$head" \
        --arg base "$base" \
        --arg body "$description" \
        '{title: $title, body: $body, head: $head, base: $base, draft: true }')

    local token=$(pass show github/cli-token | head -n 1)

    # Accept type needed for draft PR to work
    curl -X POST \
        -H 'Content-type: application/json' \
        -H 'Accept: application/vnd.github.shadow-cat-preview+json;q=0.9,*/*;q=0.8' \
        -d "$json" \
        -u "cyberdummy:$token" \
        "https://api.github.com/repos/${repo}/pulls"

}


[ $# -gt 0 ] || exit 1

command="$1"
shift

case "$command" in
    lint-php)
        lint-php $@; exit 0 ;;
    lint-shell)
        lint-shell $@; exit 0 ;;
    shell-fmt)
        shell-fmt $@; exit 0 ;;
    lint-go)
        lint-go $@; exit 0 ;;
    lint-python)
        lint-python $@; exit 0 ;;
    create-pr)
        create-pr $@; exit 0 ;;
    repo)
        choose-repo $@; exit 0 ;;
    cdg)
        cdg $@; exit 0 ;;
    *)
        echo "`basename "$0"` $command: unknown command." >&2
        exit 1
        ;;
esac
